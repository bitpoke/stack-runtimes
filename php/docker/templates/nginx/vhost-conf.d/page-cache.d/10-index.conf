# vim: set ft=nginx:

{{- $pageCacheEnabled := default "false" .Env.STACK_PAGE_CACHE_ENABLED }}
{{- $pageCacheDebug := default "false" .Env.STACK_PAGE_CACHE_DEBUG }}

{{- if isTrue $pageCacheEnabled }}
{{- $chosenBackend := default "" .Env.STACK_PAGE_CACHE_BACKEND }}
{{- $memcachedHost := default "127.0.0.1" .Env.STACK_PAGE_CACHE_MEMCACHED_HOST }}
{{- $memcachedPort := default "11211" .Env.STACK_PAGE_CACHE_MEMCACHED_PORT }}

{{- $keyPrefix := default "nginx-cache:" .Env.STACK_PAGE_CACHE_KEY_PREFIX }}
{{- $keyUID := default "https$request_method$host$request_uri" .Env.STACK_PAGE_CACHE_KEY_UID }}

{{- $includedQueryParams := compact (splitList "," (nospace (default "" .Env.STACK_PAGE_CACHE_KEY_INCLUDED_QUERY_PARAMS))) }}
{{- $discardedQueryParams := compact (splitList "," (nospace (default "" .Env.STACK_PAGE_CACHE_KEY_DISCARDED_QUERY_PARAMS))) }}

set $skip_cache 0;

set $key "";
set $key_prefix {{ $keyPrefix }};
set $key_uid {{ $keyUID }};
set $key_uid_head {{ $keyUID | replace "$request_method" "GET" }};
set $query_string_version_key "";

set $escaped_key "";
set_escape_uri $escaped_key_prefix $key_prefix;
set $escaped_key_uid "";

set_by_lua_block $skip_cache {
    local scheme = ngx.var.scheme
    local uri = ngx.var.request_uri
    local request = ngx.ctx.request or {}
    ngx.ctx.request = request
    local user_agent = ngx.var.http_user_agent or ''

    local re = {}
    re.wp_loggedin = [[wordpress_logged_in|wordpress_no_cache|comment_author_|wp-postpass_|wp_gdsr_|fbs_|wp-query_monitor_]]
    re.bbpress_cookies = [[EmailID]]

    local find_plain = function(s, sub)
        if string.find(s, sub, 1, true) == nil then
            return false
        end

        return true
    end

    local Set = function(list)
        local set = {}
        for _, l in ipairs(list) do set[l] = true end
        return set
    end

    request.key_query_params = ""

    request.is_wp_admin = (
        not ngx.re.match(uri, "^.*/wp-admin/admin-ajax.php")
        and ngx.re.match(uri, "^.*/(wp-admin/|wp-login.php|wp-signup.php|wp-cron.php|xmlrpc.php|git-webhook.php|feed/|sitemap.xml|sitemap_index.xml)", "o")
    )

    request.wp_loggedin = (ngx.re.match(ngx.var.http_cookie or '', re.wp_loggedin, 'io') and true or false)

    request.is_dynamic = (
        request.is_wp_admin or
        request.wp_loggedin
    )

    local cache_bypass = (ngx.var.skip_cache or '0') ~= '0'
        or (ngx.re.match(ngx.var.http_cookie or '', re.bbpress_cookies, 'io') and true)
        or false

    if request.is_dynamic or cache_bypass then
        return 1
    end

    request.include_query_params = Set{
        {{- range $includedQueryParams }}
        "{{ . }}",
        {{- end }}
    }

    request.discarded_query_params = Set{
        {{- range $discardedQueryParams }}
        "{{ . }}",
        {{- end }}
    }

    local args, err = ngx.req.get_uri_args()

    if err then
        ngx.log(ngx.ERR, "failed to get uri args: ", err)
    end

    local key_query_params = {}

    for key, val in pairs(args) do
        if request.include_query_params[key] then
            if type(val) == "table" then
                table.sort(val)

                for i, v in ipairs(val) do
                    val[i] = ngx.escape_uri(tostring(v))
                end

                table.insert(key_query_params, ngx.escape_uri(key) .. "=" .. table.concat(val, ","))
            elseif type(val) == "boolean" then
                table.insert(key_query_params, ngx.escape_uri(key))
            else
                table.insert(key_query_params, ngx.escape_uri(key) .. "=" .. ngx.escape_uri(tostring(val)))
            end
        elseif not request.discarded_query_params[key] then
            -- the query param is not expected (included or discarded) so skip the cache
            return 1
        end
    end

    table.sort(key_query_params)
    request.key_query_params = table.concat(key_query_params, "&")

    return 0
}

rewrite_by_lua_block {
    if ngx.req.get_method() == "HEAD" then
        ngx.var.key_uid = ngx.var.key_uid_head
    end

    -- remove the query string from the key, so that only the expected params may be added later
    ngx.var.key_uid = string.gsub(ngx.var.key_uid, "?.*", "")

    ngx.var.escaped_key_uid = ngx.escape_uri(ngx.var.key_uid)

    {{- if eq $chosenBackend "memcached" }}
    local memcached = require "resty.memcached"

    local function identity(key) return key end

    local memc, err = memcached:new{
        -- do not escape/unescape keys
        key_transform = { identity, identity }
    }

    if not memc then
        ngx.log(ngx.ERR, "failed to instantiate memcached: ", err)
        return
    end

    memc:set_timeout(1000)

    local ok, err = memc:connect("{{ $memcachedHost }}", "{{ $memcachedPort }}")
    if not ok then
        ngx.log(ngx.ERR, "failed to connect to memcached: ", err)
        return
    end

    local global_version_key = ngx.var.key_prefix .. "version"
    local version_keys = {global_version_key}
    local key_query_params = ngx.ctx.request.key_query_params

    if key_query_params ~= '' then
        query_string_version_key = ngx.var.key_prefix .. "query_string_version:" .. ngx.var.key_uid
        ngx.var.query_string_version_key = query_string_version_key
        table.insert(version_keys, query_string_version_key)
    end

    local versions, err = memc:get(version_keys)
    if err then
        ngx.log(ngx.ERR, "failed to get page cache versions: ", err)
        return
    end

    local global_version = ""
    if versions[global_version_key] then
        global_version = versions[global_version_key][1]
    end

    if global_version == "" then
        ngx.log(ngx.INFO, "page cache global version not found, attempting to set one...")

        global_version = tostring(os.time())
        local ok, err = memc:set(global_version_key, global_version)
        if not ok then
            ngx.log(ngx.ERR, "failed to set page cache global version: ", err)
            return
        end
    end

    if key_query_params == "" then
        ngx.var.key = ngx.var.key_prefix .. global_version  .. ":" .. ngx.var.key_uid
        ngx.var.escaped_key = ngx.var.escaped_key_prefix .. ngx.escape_uri(global_version  .. ":") .. ngx.var.escaped_key_uid
    else
        local query_string_version = ""
        if versions[query_string_version_key] then
            query_string_version = versions[query_string_version_key][1]
        end

        if query_string_version == "" then
            query_string_version = tostring(os.time())
            local ok, err = memc:set(query_string_version_key, query_string_version)
            if not ok then
                ngx.log(ngx.ERR, "failed to set query string version: ", err)
                return
            end
        end

        ngx.var.key = ngx.var.key_prefix ..
            global_version .. ":" .. query_string_version  .. ":" ..
            ngx.var.key_uid .. "?" .. ngx.ctx.request.key_query_params
        ngx.var.escaped_key = ngx.var.escaped_key_prefix ..
            ngx.escape_uri(global_version .. ":" .. query_string_version  .. ":") ..
            ngx.var.escaped_key_uid .. "?" .. ngx.escape_uri(ngx.ctx.request.key_query_params)
    end

    local ok, err = memc:close()
    if not ok then
        ngx.say("failed to close memcached: ", err)
        return
    end
    {{- else }}
    ngx.var.key = ngx.var.key_prefix .. ngx.var.key_uid
        .. "?" .. ngx.ctx.request.key_query_params
    ngx.var.escaped_key = ngx.var.escaped_key_prefix .. ngx.var.escaped_key_uid
        .. "?" .. ngx.escape_uri(ngx.ctx.request.key_query_params)
    {{- end }}
}


srcache_fetch_skip $skip_cache;
srcache_store_skip $skip_cache;
srcache_store_statuses {{ default "200 301 302" .Env.STACK_PAGE_CACHE_STORE_STATUSES }};

# https://github.com/openresty/srcache-nginx-module#srcache_response_cache_control
srcache_response_cache_control {{ default "on" .Env.STACK_PAGE_CACHE_RESPONSE_CACHE_CONTROL }};

srcache_fetch GET /.stack-cache-fetch $key;
srcache_store PUT /.stack-cache-store key=$escaped_key&exptime={{ default "360" .Env.STACK_PAGE_CACHE_EXPIRE_SECONDS | atoi }};

more_set_headers "x-srcache-fetch-status $srcache_fetch_status";
{{- if isTrue $pageCacheDebug }}
more_set_headers "x-srcache-store-status $srcache_store_status";
more_set_headers "x-cache-key $key";
{{- if eq $chosenBackend "memcached" }}
more_set_headers "x-cache-query-string-version-key $query_string_version_key";
{{- end }}
{{- end }}

{{- end }}
