=encoding utf-8

[!L<Coverage Status|https://coveralls.io/repos/github/knyar/nginx-lua-prometheus/badge.svg?branch=master>](https://coveralls.io/github/knyar/nginx-lua-prometheus?branch=master)


=head1 Prometheus metric library for Nginx


This is a Lua library that can be used with Nginx to keep track of metrics and
expose them on a separate web page to be pulled by
L<Prometheus|https://prometheus.io>.


=head2 Installation


To use this library, you will need the [ngx_lua](
https://github.com/openresty/lua-nginx-module) nginx module. You can either use
a lua-enabled nginx-based server like L<OpenResty|https://openresty.org/en/>,
or a regulal nginx server with the module enabled: for example, on Debian 10 you
can simply install C<libnginx-mod-http-lua> (but please read the [known issues](
#known-issues) if you use a later Debian version).

The library file - C<prometheus.lua> - needs to be available in C<LUA_PATH>. If
this is the only Lua library you use, you can just point C<lua_package_path> to
the directory with this git repo checked out (see example below).

OpenResty users will find this library in L<opm|https://opm.openresty.org/package/knyar/nginx-lua-prometheus/>. It
is also available via
L<luarocks|https://luarocks.org/modules/knyar/nginx-lua-prometheus>.


=head2 Quick start guide


To track request latency broken down by server name and request count
broken down by server name and status, add the following to the C<http> section
of C<nginx.conf>:


    lua_shared_dict prometheus_metrics 10M;
    lua_package_path "/path/to/nginx-lua-prometheus/?.lua;;";
    
    init_worker_by_lua_block {
      prometheus = require("prometheus").init("prometheus_metrics")
    
      metric_requests = prometheus:counter(
        "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
      metric_latency = prometheus:histogram(
        "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
      metric_connections = prometheus:gauge(
        "nginx_http_connections", "Number of HTTP connections", {"state"})
    }
    
    log_by_lua_block {
      metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
      metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
    }

This:

=over


=item *

configures a shared dictionary for your metrics called C<prometheus_metrics>
with a 10MB size limit;

=item *

registers a counter called C<nginx_http_requests_total> with two labels:
C<host> and C<status>;

=item *

registers a histogram called C<nginx_http_request_duration_seconds> with one
label C<host>;

=item *

registers a gauge called C<nginx_http_connections> with one label C<state>;

=item *

on each HTTP request measures its latency, recording it in the histogram and
increments the counter, setting current server name as the C<host> label and
HTTP status code as the C<status> label.


=back

Last step is to configure a separate server that will expose the metrics.
Please make sure to only make it reachable from your Prometheus server:


    server {
      listen 9145;
      allow 192.168.0.0/16;
      deny all;
      location /metrics {
        content_by_lua_block {
          metric_connections:set(ngx.var.connections_reading, {"reading"})
          metric_connections:set(ngx.var.connections_waiting, {"waiting"})
          metric_connections:set(ngx.var.connections_writing, {"writing"})
          prometheus:collect()
        }
      }
    }

Metrics will be available at C<http://your.nginx:9145/metrics>. Note that the
gauge metric in this example contains values obtained from nginx global state,
so they get set immediately before metrics are returned to the client.


=head2 API reference



=head3 init()


B<syntax:> require("prometheus").init(I<dict_name>, [I<options>]])

Initializes the module. This should be called once from the
L<init_worker_by_lua_block|https://github.com/openresty/lua-nginx-module#init_worker_by_lua_block>
section of nginx configuration.


=over


=item *

C<dict_name> is the name of the nginx shared dictionary which will be used to
store all metrics. Defaults to C<prometheus_metrics> if not specified.

=item *

C<options> is a table of configuration options that can be provided. Accepted
options are:

=over


=item *

C<prefix> (string): metric name prefix. This string will be prepended to
metric names on output.

=item *

C<error_metric_name> (string): Can be used to change the default name of
error metric (see L<Built-in metrics> for details).

=item *

C<sync_interval> (number): sets per-worker counter sync interval in seconds.
This sets the boundary on eventual consistency of counter metrics. Defaults
to 1.

=item *

C<lookup_max_size> (number): maximum size of a per-metric lookup table
maintained by each worker to cache full metric names. Defaults to 1000.
If you have metrics with extremely high cardinality and lots of available
RAM, you might want to increase this to avoid cache getting flushed too
often. Decreasing this makes sense if you have a very large number of
metrics or need to minimize memory usage of this library.


=back


=back

Returns a C<prometheus> object that should be used to register metrics.

Example:

    init_worker_by_lua_block {
      prometheus = require("prometheus").init("prometheus_metrics", {sync_interval=3})
    }


=head3 prometheus:counter()


B<syntax:> prometheus:counter(I<name>, I<description>, I<label_names>)

Registers a counter. Should be called once for each counter from the
[init_worker_by_lua_block](
https://github.com/openresty/lua-nginx-module#init_worker_by_lua_block)
section.


=over


=item *

C<name> is the name of the metric.

=item *

C<description> is the text description that will be presented to Prometheus
along with the metric. Optional (pass C<nil> if you still need to define
label names).

=item *

C<label_names> is an array of label names for the metric. Optional.


=back

L<Naming section|https://prometheus.io/docs/practices/naming/> of Prometheus
documentation provides good guidelines on choosing metric and label names.

Returns a C<counter> object that can later be incremented.

Example:

    init_worker_by_lua_block {
      prometheus = require("prometheus").init("prometheus_metrics")
    
      metric_bytes = prometheus:counter(
        "nginx_http_request_size_bytes", "Total size of incoming requests")
      metric_requests = prometheus:counter(
        "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
    }


=head3 prometheus:gauge()


B<syntax:> prometheus:gauge(I<name>, I<description>, I<label_names>)

Registers a gauge. Should be called once for each gauge from the
[init_worker_by_lua_block](
https://github.com/openresty/lua-nginx-module#init_worker_by_lua_block)
section.


=over


=item *

C<name> is the name of the metric.

=item *

C<description> is the text description that will be presented to Prometheus
along with the metric. Optional (pass C<nil> if you still need to define
label names).

=item *

C<label_names> is an array of label names for the metric. Optional.


=back

Returns a C<gauge> object that can later be set.

Example:

    init_worker_by_lua_block {
      prometheus = require("prometheus").init("prometheus_metrics")
    
      metric_connections = prometheus:gauge(
        "nginx_http_connections", "Number of HTTP connections", {"state"})
    }


=head3 prometheus:histogram()


B<syntax:> prometheus:histogram(I<name>, I<description>, I<label_names>,
I<buckets>)

Registers a histogram. Should be called once for each histogram from the
[init_worker_by_lua_block](
https://github.com/openresty/lua-nginx-module#init_worker_by_lua_block)
section.


=over


=item *

C<name> is the name of the metric.

=item *

C<description> is the text description. Optional.

=item *

C<label_names> is an array of label names for the metric. Optional.

=item *

C<buckets> is an array of numbers defining bucket boundaries. Optional,
defaults to 20 latency buckets covering a range from 5ms to 10s (in seconds).


=back

Returns a C<histogram> object that can later be used to record samples.

Example:

    init_worker_by_lua_block {
      prometheus = require("prometheus").init("prometheus_metrics")
    
      metric_latency = prometheus:histogram(
        "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
      metric_response_sizes = prometheus:histogram(
        "nginx_http_response_size_bytes", "Size of HTTP responses", nil,
        {10,100,1000,10000,100000,1000000})
    }


=head3 prometheus:collect()


B<syntax:> prometheus:collect()

Presents all metrics in a text format compatible with Prometheus. This should be
called in
L<content_by_lua_block|https://github.com/openresty/lua-nginx-module#content_by_lua_block>
to expose the metrics on a separate HTTP page.

Example:

    location /metrics {
      content_by_lua_block { prometheus:collect() }
      allow 192.168.0.0/16;
      deny all;
    }


=head3 prometheus:metric_data()


B<syntax:> prometheus:metric_data()

Returns metric data as an array of strings.


=head3 counter:inc()


B<syntax:> counter:inc(I<value>, I<label_values>)

Increments a previously registered counter. This is usually called from
L<log_by_lua_block|https://github.com/openresty/lua-nginx-module#log_by_lua_block>
globally or per server/location.


=over


=item *

C<value> is a value that should be added to the counter. Defaults to 1.

=item *

C<label_values> is an array of label values.


=back

The number of label values should match the number of label names defined when
the counter was registered using C<prometheus:counter()>. No label values should
be provided for counters with no labels. Non-printable characters will be
stripped from label values.

Example:

    log_by_lua_block {
      metric_bytes:inc(tonumber(ngx.var.request_length))
      metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
    }


=head3 counter:del()


B<syntax:> counter:del(I<label_values>)

Delete a previously registered counter. This is usually called when you don't
need to observe such counter (or a metric with specific label values in this
counter) any more. If this counter has labels, you have to pass C<label_values>
to delete the specific metric of this counter. If you want to delete all the
metrics of a counter with labels, you should call C<Counter:reset()>.


=over


=item *

C<label_values> is an array of label values.


=back

The number of label values should match the number of label names defined when
the counter was registered using C<prometheus:counter()>. No label values should
be provided for counters with no labels. Non-printable characters will be
stripped from label values.

This function will wait for C<sync_interval> before deleting the metric to
allow all workers to sync their counters.


=head3 counter:reset()


B<syntax:> counter:reset()

Delete all metrics for a previously registered counter. If this counter have no
labels, it is just the same as C<Counter:del()> function. If this counter have labels,
it will delete all the metrics with different label values.

This function will wait for C<sync_interval> before deleting the metrics to
allow all workers to sync their counters.


=head3 gauge:set()


B<syntax:> gauge:set(I<value>, I<label_values>)

Sets the current value of a previously registered gauge. This could be called
from L<log_by_lua_block|https://github.com/openresty/lua-nginx-module#log_by_lua_block>
globally or per server/location to modify a gauge on each request, or from
L<content_by_lua_block|https://github.com/openresty/lua-nginx-module#content_by_lua_block>
just before C<prometheus::collect()> to return a real-time value.


=over


=item *

C<value> is a value that the gauge should be set to. Required.

=item *

C<label_values> is an array of label values.


=back


=head3 gauge:inc()


B<syntax:> gauge:inc(I<value>, I<label_values>)

Increments or decrements a previously registered gauge. This is usually called
when you want to observe the real-time value of a metric that can both be
increased and decreased.


=over


=item *

C<value> is a value that should be added to the gauge. It could be a negative
value when you need to decrease the value of the gauge. Defaults to 1.

=item *

C<label_values> is an array of label values.


=back

The number of label values should match the number of label names defined when
the gauge was registered using C<prometheus:gauge()>. No label values should
be provided for gauges with no labels. Non-printable characters will be
stripped from label values.


=head3 gauge:del()


B<syntax:> gauge:del(I<label_values>)

Delete a previously registered gauge. This is usually called when you don't
need to observe such gauge (or a metric with specific label values in this
gauge) any more. If this gauge has labels, you have to pass C<label_values>
to delete the specific metric of this gauge. If you want to delete all the
metrics of a gauge with labels, you should call C<Gauge:reset()>.


=over


=item *

C<label_values> is an array of label values.


=back

The number of label values should match the number of label names defined when
the gauge was registered using C<prometheus:gauge()>. No label values should
be provided for gauges with no labels. Non-printable characters will be
stripped from label values.


=head3 gauge:reset()


B<syntax:> gauge:reset()

Delete all metrics for a previously registered gauge. If this gauge have no
labels, it is just the same as C<Gauge:del()> function. If this gauge have labels,
it will delete all the metrics with different label values.


=head3 histogram:observe()


B<syntax:> histogram:observe(I<value>, I<label_values>)

Records a value in a previously registered histogram. Usually called from
L<log_by_lua_block|https://github.com/openresty/lua-nginx-module#log_by_lua_block>
globally or per server/location.


=over


=item *

C<value> is a value that should be recorded. Required.

=item *

C<label_values> is an array of label values.


=back

Example:

    log_by_lua_block {
      metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
      metric_response_sizes:observe(tonumber(ngx.var.bytes_sent))
    }


=head3 histogram:reset()


B<syntax:> histogram:reset()

Delete all metrics for a previously registered histogram.

This function will wait for C<sync_interval> before deleting the metrics to
allow all workers to sync their counters.


=head3 Built-in metrics


The module increments an error metric called C<nginx_metric_errors_total>
(unless another name was configured in L<init()>) if it encounters
an error (for example, when C<lua_shared_dict> becomes full). You might want
to configure an alert on that metric.


=head2 Caveats



=head3 Usage in stream module


For now, there is no way to share a dictionary between HTTP and Stream modules
in Nginx. If you are using this library to collect metrics from stream module,
you will need to configure a separate endpoint to return them. Here's an
example.


    server {
      listen 9145;
      content_by_lua_block {
        local sock = assert(ngx.req.socket(true))
        local data = sock:receive()
        local location = "GET /metrics"
        if string.sub(data, 1, string.len(location)) == location then
          ngx.say("HTTP/1.1 200 OK")
          ngx.say("Content-Type: text/plain")
          ngx.say("")
          ngx.say(table.concat(prometheus:metric_data(), ""))
        else
          ngx.say("HTTP/1.1 404 Not Found")
        end
      }
    }


=head2 Known issues



=head3 libnginx-mod-http-lua broken in some Debian and Ubuntu versions


Note that recent stable versions of Debian and Ubuntu are known to package
C<ngx_lua> version incompatible with the version of C<nginx> shipped in the same
distro. This results in nginx process segfaulting when the lua module is used,
making it completely unusable. In such case nginx error logs will clearly
indicate that the process crashed, e.g.:


    [alert] 123#123: worker process 45678 exited on signal 11

The following versions of Debian and Ubuntu have been known to have this
issue:


=over


=item *

Debian 11 (bug L<#994178|https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=994178>)

=item *

Ubuntu 20.04 and 21.04 (bug L<#1893753|https://bugs.launchpad.net/ubuntu/+source/nginx/+bug/1893753>)


=back


=head2 Troubleshooting



=head3 Make sure that nginx lua module is enabled


If you experience problems indicating that nginx doesn't know how to interpret
lua scripts, please make sure that [the lua
module](https://github.com/openresty/lua-nginx-module) is enabled. You might
need something like this in your C<nginx.conf>:


    load_module modules/ndk_http_module.so;
    load_module modules/ngx_http_lua_module.so;


=head3 Keep lua code cache enabled


This module expects the
L<lua_code_cache|https://github.com/openresty/lua-nginx-module#lua_code_cache>
option to be C<on> (which is the default).


=head3 Try using an older version of the library


If you are seeing library initialization errors, followed by errors for each
metric change request (e.g. I<attempt to index global '...' (a nil value)>),
you are probably using an old version of lua-nginx-module. For example, this
will happen if you try using the latest version of this library with the
C<nginx-extras> package shipped with Ubuntu 16.04.

If you cannot upgrade nginx and lua-nginx-module, you can try using an older
version of this library; it will not have the latest performance optimizations,
but will still be functional. The recommended older release to use is
L<0.20181120|https://github.com/knyar/nginx-lua-prometheus/tree/0.20181120>.


=head2 Development



=head3 Install dependencies for testing



=over


=item *

C<luarocks install luacheck>

=item *

C<luarocks install luaunit>


=back


=head3 Run tests



=over


=item *

C<luacheck --globals ngx -- prometheus.lua>

=item *

C<lua prometheus_test.lua>

=item *

C<cd integration && ./test.sh> (requires Docker and Go)


=back


=head3 Releasing new version



=over


=item *

update CHANGELOG.md

=item *

update version in the C<dist.ini>

=item *

rename C<.rockspec> file and update version inside it

=item *

commit changes

=item *

create a new Git tag: C<git tag 0.XXXXXXXX && git push origin 0.XXXXXXXX>

=item *

push to luarocks: C<luarocks upload nginx-lua-prometheus-0.20181120-1.rockspec>

=item *

upload to OPM: C<opm build && opm upload>


=back


=head2 Credits



=over


=item *

Created and maintained by Anton Tolchanov (L<@knyar|https://github.com/knyar>)

=item *

Metrix prefix support contributed by david birdsong ([@davidbirdsong](
https://github.com/davidbirdsong))

=item *

Gauge support contributed by Cosmo Petrich ([@cosmopetrich](
https://github.com/cosmopetrich))

=item *

Performance improvements and per-worker counters are contributed by Wangchong
Zhou (L<@fffonion|https://github.com/fffonion>) / [@Kong](
https://github.com/Kong).

=item *

Metric name tracking improvements contributed by Jan Dolinár ([@dolik-rce](
https://github.com/dolik-rce))


=back


=head2 License


Licensed under MIT license.


=head3 Third Party License


Following third party modules are used in this library:


=over


=item *

L<KongE<sol>lua-resty-counter|https://github.com/Kong/lua-resty-counter>


=back

This module is licensed under the Apache 2.0 license.

Copyright (C) 2019, Kong Inc.

All rights reserved.

